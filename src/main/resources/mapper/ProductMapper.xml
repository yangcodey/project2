<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.project2.mapper.ProductMapper">

    <resultMap id="BaseResultMap" type="com.example.project2.entity.Product">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="variety" property="variety" jdbcType="VARCHAR"/>
        <result column="specification" property="specification" jdbcType="VARCHAR"/>
        <result column="price" property="price" jdbcType="DECIMAL"/>
        <result column="stock_quantity" property="stockQuantity" jdbcType="INTEGER"/>
        <result column="breeding_cycle" property="breedingCycle" jdbcType="INTEGER"/>
        <result column="description" property="description" jdbcType="VARCHAR"/>
        <result column="seller_id" property="sellerId" jdbcType="BIGINT"/>
        <result column="image_url" property="imageUrl" jdbcType="VARCHAR"/>
        <result column="status" property="status" jdbcType="TINYINT"/>
        <result column="created_at" property="createdAt" jdbcType="TIMESTAMP"/>
        <result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP"/>
    </resultMap>

    <sql id="Base_Column_List">
        id, name, variety, specification, price, stock_quantity, breeding_cycle, description, seller_id, image_url, status, created_at, updated_at
    </sql>

    <select id="selectById" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM products
        WHERE id = #{id}
    </select>

    <select id="selectAll" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM products
        WHERE status = 1
        ORDER BY created_at DESC
    </select>

    <select id="selectBySellerId" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM products
        WHERE seller_id = #{sellerId}
        ORDER BY created_at DESC
    </select>

    <select id="selectByNameLike" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM products
        WHERE name LIKE CONCAT('%', #{name}, '%') AND status = 1
        ORDER BY created_at DESC
    </select>

    <select id="selectByVariety" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM products
        WHERE variety = #{variety} AND status = 1
        ORDER BY created_at DESC
    </select>

    <select id="selectByPriceRange" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM products
        WHERE price BETWEEN #{minPrice} AND #{maxPrice} AND status = 1
        ORDER BY created_at DESC
    </select>

    <insert id="insert" parameterType="com.example.project2.entity.Product" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO products (name, variety, specification, price, stock_quantity, breeding_cycle, description, seller_id, image_url, status, created_at, updated_at)
        VALUES (#{name}, #{variety}, #{specification}, #{price}, #{stockQuantity}, #{breedingCycle}, #{description}, #{sellerId}, #{imageUrl}, #{status}, NOW(), NOW())
    </insert>

    <update id="update" parameterType="com.example.project2.entity.Product">
        UPDATE products
        <set>
            <if test="name != null">name = #{name},</if>
            <if test="variety != null">variety = #{variety},</if>
            <if test="specification != null">specification = #{specification},</if>
            <if test="price != null">price = #{price},</if>
            <if test="stockQuantity != null">stock_quantity = #{stockQuantity},</if>
            <if test="breedingCycle != null">breeding_cycle = #{breedingCycle},</if>
            <if test="description != null">description = #{description},</if>
            <if test="sellerId != null">seller_id = #{sellerId},</if>
            <if test="imageUrl != null">image_url = #{imageUrl},</if>
            <if test="status != null">status = #{status},</if>
            updated_at = NOW()
        </set>
        WHERE id = #{id}
    </update>

    <update id="updateStock">
        UPDATE products
        SET stock_quantity = #{quantity}, updated_at = NOW()
        WHERE id = #{id}
    </update>

    <update id="updateStatus">
        UPDATE products
        SET status = #{status}, updated_at = NOW()
        WHERE id = #{id}
    </update>

    <delete id="deleteById" parameterType="java.lang.Long">
        DELETE FROM products WHERE id = #{id}
    </delete>

    <!-- 分页查询产品（支持筛选） -->
    <select id="selectWithPagination" parameterType="java.util.Map" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM products
        <where>
            <if test="params.keyword != null and params.keyword != ''">
                AND name LIKE CONCAT('%', #{params.keyword}, '%')
            </if>
            <if test="params.status != null">
                AND status = #{params.status}
            </if>
            <if test="params.variety != null and params.variety != ''">
                AND variety = #{params.variety}
            </if>
        </where>
        ORDER BY created_at DESC
        LIMIT #{params.offset}, #{params.size}
    </select>

    <!-- 统计筛选条件下的产品总数 -->
    <select id="countWithFilters" parameterType="java.util.Map" resultType="int">
        SELECT COUNT(*)
        FROM products
        <where>
            <if test="params.keyword != null and params.keyword != ''">
                AND name LIKE CONCAT('%', #{params.keyword}, '%')
            </if>
            <if test="params.status != null">
                AND status = #{params.status}
            </if>
            <if test="params.variety != null and params.variety != ''">
                AND variety = #{params.variety}
            </if>
        </where>
    </select>

    <!-- 统计产品总数 -->
    <select id="countAll" resultType="int">
        SELECT COUNT(*) FROM products
    </select>

    <!-- 根据状态统计产品数量 -->
    <select id="countByStatus" parameterType="int" resultType="int">
        SELECT COUNT(*) FROM products WHERE status = #{status}
    </select>

    <!-- 获取产品销量统计 -->
    <select id="getProductSalesStats" resultType="map">
        SELECT 
            p.id,
            p.name,
            p.variety,
            p.price,
            p.stock_quantity,
            COUNT(o.id) as order_count,
            COALESCE(SUM(o.quantity), 0) as total_sold,
            COALESCE(SUM(o.total_amount), 0) as total_revenue
        FROM products p
        LEFT JOIN orders o ON p.id = o.product_id
        GROUP BY p.id, p.name, p.variety, p.price, p.stock_quantity
        ORDER BY total_sold DESC
    </select>

    <!-- 获取产品品种分布 -->
    <select id="getVarietyDistribution" resultType="map">
        SELECT 
            variety,
            COUNT(*) as count,
            AVG(price) as avg_price,
            SUM(stock_quantity) as total_stock
        FROM products
        WHERE status = 1
        GROUP BY variety
        ORDER BY count DESC
    </select>

    <!-- 获取价格区间分布 -->
    <select id="getPriceDistribution" resultType="map">
        SELECT 
            CASE 
                WHEN price &lt; 50 THEN '0-50'
                WHEN price &lt; 100 THEN '50-100'
                WHEN price &lt; 200 THEN '100-200'
                WHEN price &lt; 500 THEN '200-500'
                ELSE '500+'
            END as price_range,
            COUNT(*) as count,
            AVG(price) as avg_price
        FROM products
        WHERE status = 1
        GROUP BY 
            CASE 
                WHEN price &lt; 50 THEN '0-50'
                WHEN price &lt; 100 THEN '50-100'
                WHEN price &lt; 200 THEN '100-200'
                WHEN price &lt; 500 THEN '200-500'
                ELSE '500+'
            END
        ORDER BY MIN(price)
    </select>

    <!-- 获取总库存 -->
    <select id="getTotalStock" resultType="int">
        SELECT COALESCE(SUM(stock_quantity), 0) FROM products WHERE status = 1
    </select>

    <!-- 获取低库存产品数量 -->
    <select id="getLowStockCount" parameterType="int" resultType="int">
        SELECT COUNT(*) FROM products WHERE status = 1 AND stock_quantity &lt;= #{threshold}
    </select>

</mapper>
